syntax = "proto3";

package smart_home;
option go_package = "github.com/tobiasjungmann/Himbeergarten_RPi/server/proto";
option java_package = "com.example.rpicommunicator_v1";

import "google/protobuf/timestamp.proto";

service StorageServer {
  rpc getOverviewAllPlants(GetAllPlantsRequest) returns (AllPlantsReply) {}
  rpc getAdditionalDataPlant(GetAdditionalDataPlantRequest) returns (GetAdditionalDataPlantReply) {}

  // Also used to update a plant with the same id if it already exists
  rpc addNewPlant(AddPlantRequest) returns (PlantOverviewMsg) {}
  rpc deletePlant(PlantRequest) returns (DeletePlantReply) {}

  rpc getRequestedSensorStates(GetRequestedSensorStatesRequest) returns (GetRequestedSensorStatesResponse) {}
  rpc storeHumidityEntry(StoreHumidityRequest) returns (StoreHumidityReply) {}

  rpc getConnectedDevicesOverview(GetConnectedDevicesRequest) returns (GetConnectedDevicesResponse){}
}

message GetRequestedSensorStatesRequest{
  int32 deviceId = 1;
}

message GetRequestedSensorStatesResponse{
  repeated RequestedSensorMsg sensors = 1;
}

message RequestedSensorMsg{
  int32 requestId = 1;
  int32 sensorId = 2;
}

message StoreHumidityRequest{
  int32 requestNumber = 1;
  int32 humidity = 2;
}

message GetAllPlantsRequest{
}

message PlantThumbnailReply{
  repeated PlantThumbnailMsg images = 1;
}
message PlantThumbnailMsg{
  int32 plantId = 1;
  bytes image = 2;
}

message  PlantRequest{
  int32 plant = 1;
}

message DeletePlantReply{
}

message StoreHumidityReply{
}

message AllPlantsReply{
  repeated PlantOverviewMsg plants = 1;
}

message AddPlantRequest {
  int32 plantId = 1;
  string Name = 2;
  string Info = 3;
  int32 gpioSensorSlot = 4;
  repeated bytes images = 5;
}

message PlantOverviewMsg{
  int32 plantId = 1;
  string Name = 2;
  string Info = 3;
  GpioIdentifierMsg gpio = 4;
  bytes thumbnail = 5;
}

message GetAdditionalDataPlantRequest{
  int32 plantId = 1;
}

message HumidityMsg{
  int32 humidity = 1;
  float timestamp = 2;
}

message GpioIdentifierMsg{
  int32 deviceId = 1;
  string deviceSerialInterfaceName = 2;
  string gpioName = 3;
}

message GetAdditionalDataPlantReply{
  int32 plant = 1;
  GpioIdentifierMsg gpio = 2;
  repeated HumidityMsg Humidity = 4;
  repeated bytes images = 5;
}

message GetConnectedDevicesRequest{

}

message GetConnectedDevicesResponse{
  repeated DeviceOverviewMsg devices = 1;
}

message DeviceOverviewMsg{
  int32 deviceId = 1;
  DeviceTypes type = 2;
  string interface = 3;
  string name = 4;
  string userId = 5;
}

enum GpioUser{
  GPIO_USER_UNDEFINED = 0;
  GPIO_USER_PLANT = 1;
  GPIO_USER_RELAIS = 2;
}
enum DeviceTypes{
  DEVICE_UNDEFINED = 0;
  DEVICE_RPI = 1;
  DEVICE_ARDUINO_NANO = 2;
}