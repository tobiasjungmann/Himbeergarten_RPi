// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: humidityStorage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HumidityStorageClient is the client API for HumidityStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumidityStorageClient interface {
	StoreHumidityEntry(ctx context.Context, in *StoreHumidityRequest, opts ...grpc.CallOption) (*StoreHumidityReply, error)
}

type humidityStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewHumidityStorageClient(cc grpc.ClientConnInterface) HumidityStorageClient {
	return &humidityStorageClient{cc}
}

func (c *humidityStorageClient) StoreHumidityEntry(ctx context.Context, in *StoreHumidityRequest, opts ...grpc.CallOption) (*StoreHumidityReply, error) {
	out := new(StoreHumidityReply)
	err := c.cc.Invoke(ctx, "/smart_home.HumidityStorage/storeHumidityEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HumidityStorageServer is the server API for HumidityStorage service.
// All implementations must embed UnimplementedHumidityStorageServer
// for forward compatibility
type HumidityStorageServer interface {
	StoreHumidityEntry(context.Context, *StoreHumidityRequest) (*StoreHumidityReply, error)
	mustEmbedUnimplementedHumidityStorageServer()
}

// UnimplementedHumidityStorageServer must be embedded to have forward compatible implementations.
type UnimplementedHumidityStorageServer struct {
}

func (UnimplementedHumidityStorageServer) StoreHumidityEntry(context.Context, *StoreHumidityRequest) (*StoreHumidityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHumidityEntry not implemented")
}
func (UnimplementedHumidityStorageServer) mustEmbedUnimplementedHumidityStorageServer() {}

// UnsafeHumidityStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HumidityStorageServer will
// result in compilation errors.
type UnsafeHumidityStorageServer interface {
	mustEmbedUnimplementedHumidityStorageServer()
}

func RegisterHumidityStorageServer(s grpc.ServiceRegistrar, srv HumidityStorageServer) {
	s.RegisterService(&HumidityStorage_ServiceDesc, srv)
}

func _HumidityStorage_StoreHumidityEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHumidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumidityStorageServer).StoreHumidityEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.HumidityStorage/storeHumidityEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumidityStorageServer).StoreHumidityEntry(ctx, req.(*StoreHumidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HumidityStorage_ServiceDesc is the grpc.ServiceDesc for HumidityStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HumidityStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smart_home.HumidityStorage",
	HandlerType: (*HumidityStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "storeHumidityEntry",
			Handler:    _HumidityStorage_StoreHumidityEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "humidityStorage.proto",
}
