// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: storageServer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServerClient is the client API for StorageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServerClient interface {
	GetOverviewAllPlants(ctx context.Context, in *GetAllPlantsRequest, opts ...grpc.CallOption) (*AllPlantsReply, error)
	GetAdditionalDataPlant(ctx context.Context, in *GetAdditionalDataPlantRequest, opts ...grpc.CallOption) (*GetAdditionalDataPlantReply, error)
	// Also used to update a plant with the same id if it already exists
	AddNewPlant(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*PlantOverviewMsg, error)
	DeletePlant(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*DeletePlantReply, error)
	GetRequestedSensorStates(ctx context.Context, in *GetRequestedSensorStatesRequest, opts ...grpc.CallOption) (*GetRequestedSensorStatesResponse, error)
	StoreHumidityEntry(ctx context.Context, in *StoreHumidityRequest, opts ...grpc.CallOption) (*StoreHumidityReply, error)
	GetConnectedDevicesOverview(ctx context.Context, in *GetConnectedDevicesRequest, opts ...grpc.CallOption) (*GetConnectedDevicesResponse, error)
}

type storageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServerClient(cc grpc.ClientConnInterface) StorageServerClient {
	return &storageServerClient{cc}
}

func (c *storageServerClient) GetOverviewAllPlants(ctx context.Context, in *GetAllPlantsRequest, opts ...grpc.CallOption) (*AllPlantsReply, error) {
	out := new(AllPlantsReply)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/getOverviewAllPlants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) GetAdditionalDataPlant(ctx context.Context, in *GetAdditionalDataPlantRequest, opts ...grpc.CallOption) (*GetAdditionalDataPlantReply, error) {
	out := new(GetAdditionalDataPlantReply)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/getAdditionalDataPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) AddNewPlant(ctx context.Context, in *AddPlantRequest, opts ...grpc.CallOption) (*PlantOverviewMsg, error) {
	out := new(PlantOverviewMsg)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/addNewPlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) DeletePlant(ctx context.Context, in *PlantRequest, opts ...grpc.CallOption) (*DeletePlantReply, error) {
	out := new(DeletePlantReply)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/deletePlant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) GetRequestedSensorStates(ctx context.Context, in *GetRequestedSensorStatesRequest, opts ...grpc.CallOption) (*GetRequestedSensorStatesResponse, error) {
	out := new(GetRequestedSensorStatesResponse)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/getRequestedSensorStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) StoreHumidityEntry(ctx context.Context, in *StoreHumidityRequest, opts ...grpc.CallOption) (*StoreHumidityReply, error) {
	out := new(StoreHumidityReply)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/storeHumidityEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) GetConnectedDevicesOverview(ctx context.Context, in *GetConnectedDevicesRequest, opts ...grpc.CallOption) (*GetConnectedDevicesResponse, error) {
	out := new(GetConnectedDevicesResponse)
	err := c.cc.Invoke(ctx, "/smart_home.StorageServer/getConnectedDevicesOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServerServer is the server API for StorageServer service.
// All implementations must embed UnimplementedStorageServerServer
// for forward compatibility
type StorageServerServer interface {
	GetOverviewAllPlants(context.Context, *GetAllPlantsRequest) (*AllPlantsReply, error)
	GetAdditionalDataPlant(context.Context, *GetAdditionalDataPlantRequest) (*GetAdditionalDataPlantReply, error)
	// Also used to update a plant with the same id if it already exists
	AddNewPlant(context.Context, *AddPlantRequest) (*PlantOverviewMsg, error)
	DeletePlant(context.Context, *PlantRequest) (*DeletePlantReply, error)
	GetRequestedSensorStates(context.Context, *GetRequestedSensorStatesRequest) (*GetRequestedSensorStatesResponse, error)
	StoreHumidityEntry(context.Context, *StoreHumidityRequest) (*StoreHumidityReply, error)
	GetConnectedDevicesOverview(context.Context, *GetConnectedDevicesRequest) (*GetConnectedDevicesResponse, error)
	mustEmbedUnimplementedStorageServerServer()
}

// UnimplementedStorageServerServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServerServer struct {
}

func (UnimplementedStorageServerServer) GetOverviewAllPlants(context.Context, *GetAllPlantsRequest) (*AllPlantsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverviewAllPlants not implemented")
}
func (UnimplementedStorageServerServer) GetAdditionalDataPlant(context.Context, *GetAdditionalDataPlantRequest) (*GetAdditionalDataPlantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdditionalDataPlant not implemented")
}
func (UnimplementedStorageServerServer) AddNewPlant(context.Context, *AddPlantRequest) (*PlantOverviewMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPlant not implemented")
}
func (UnimplementedStorageServerServer) DeletePlant(context.Context, *PlantRequest) (*DeletePlantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlant not implemented")
}
func (UnimplementedStorageServerServer) GetRequestedSensorStates(context.Context, *GetRequestedSensorStatesRequest) (*GetRequestedSensorStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequestedSensorStates not implemented")
}
func (UnimplementedStorageServerServer) StoreHumidityEntry(context.Context, *StoreHumidityRequest) (*StoreHumidityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreHumidityEntry not implemented")
}
func (UnimplementedStorageServerServer) GetConnectedDevicesOverview(context.Context, *GetConnectedDevicesRequest) (*GetConnectedDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedDevicesOverview not implemented")
}
func (UnimplementedStorageServerServer) mustEmbedUnimplementedStorageServerServer() {}

// UnsafeStorageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServerServer will
// result in compilation errors.
type UnsafeStorageServerServer interface {
	mustEmbedUnimplementedStorageServerServer()
}

func RegisterStorageServerServer(s grpc.ServiceRegistrar, srv StorageServerServer) {
	s.RegisterService(&StorageServer_ServiceDesc, srv)
}

func _StorageServer_GetOverviewAllPlants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPlantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).GetOverviewAllPlants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/getOverviewAllPlants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).GetOverviewAllPlants(ctx, req.(*GetAllPlantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_GetAdditionalDataPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdditionalDataPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).GetAdditionalDataPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/getAdditionalDataPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).GetAdditionalDataPlant(ctx, req.(*GetAdditionalDataPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_AddNewPlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).AddNewPlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/addNewPlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).AddNewPlant(ctx, req.(*AddPlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_DeletePlant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).DeletePlant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/deletePlant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).DeletePlant(ctx, req.(*PlantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_GetRequestedSensorStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestedSensorStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).GetRequestedSensorStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/getRequestedSensorStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).GetRequestedSensorStates(ctx, req.(*GetRequestedSensorStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_StoreHumidityEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreHumidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).StoreHumidityEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/storeHumidityEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).StoreHumidityEntry(ctx, req.(*StoreHumidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_GetConnectedDevicesOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectedDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).GetConnectedDevicesOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smart_home.StorageServer/getConnectedDevicesOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).GetConnectedDevicesOverview(ctx, req.(*GetConnectedDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageServer_ServiceDesc is the grpc.ServiceDesc for StorageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smart_home.StorageServer",
	HandlerType: (*StorageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOverviewAllPlants",
			Handler:    _StorageServer_GetOverviewAllPlants_Handler,
		},
		{
			MethodName: "getAdditionalDataPlant",
			Handler:    _StorageServer_GetAdditionalDataPlant_Handler,
		},
		{
			MethodName: "addNewPlant",
			Handler:    _StorageServer_AddNewPlant_Handler,
		},
		{
			MethodName: "deletePlant",
			Handler:    _StorageServer_DeletePlant_Handler,
		},
		{
			MethodName: "getRequestedSensorStates",
			Handler:    _StorageServer_GetRequestedSensorStates_Handler,
		},
		{
			MethodName: "storeHumidityEntry",
			Handler:    _StorageServer_StoreHumidityEntry_Handler,
		},
		{
			MethodName: "getConnectedDevicesOverview",
			Handler:    _StorageServer_GetConnectedDevicesOverview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storageServer.proto",
}
