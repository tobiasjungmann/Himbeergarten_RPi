// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: plantStorage.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GpioUser int32

const (
	GpioUser_GPIO_USER_UNDEFINED GpioUser = 0
	GpioUser_GPIO_USER_PLANT     GpioUser = 1
	GpioUser_GPIO_USER_RELAIS    GpioUser = 2
)

// Enum value maps for GpioUser.
var (
	GpioUser_name = map[int32]string{
		0: "GPIO_USER_UNDEFINED",
		1: "GPIO_USER_PLANT",
		2: "GPIO_USER_RELAIS",
	}
	GpioUser_value = map[string]int32{
		"GPIO_USER_UNDEFINED": 0,
		"GPIO_USER_PLANT":     1,
		"GPIO_USER_RELAIS":    2,
	}
)

func (x GpioUser) Enum() *GpioUser {
	p := new(GpioUser)
	*p = x
	return p
}

func (x GpioUser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpioUser) Descriptor() protoreflect.EnumDescriptor {
	return file_plantStorage_proto_enumTypes[0].Descriptor()
}

func (GpioUser) Type() protoreflect.EnumType {
	return &file_plantStorage_proto_enumTypes[0]
}

func (x GpioUser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpioUser.Descriptor instead.
func (GpioUser) EnumDescriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{0}
}

type DeviceTypes int32

const (
	DeviceTypes_DEVICE_UNDEFINED    DeviceTypes = 0
	DeviceTypes_DEVICE_RPI          DeviceTypes = 1
	DeviceTypes_DEVICE_ARDUINO_NANO DeviceTypes = 2
)

// Enum value maps for DeviceTypes.
var (
	DeviceTypes_name = map[int32]string{
		0: "DEVICE_UNDEFINED",
		1: "DEVICE_RPI",
		2: "DEVICE_ARDUINO_NANO",
	}
	DeviceTypes_value = map[string]int32{
		"DEVICE_UNDEFINED":    0,
		"DEVICE_RPI":          1,
		"DEVICE_ARDUINO_NANO": 2,
	}
)

func (x DeviceTypes) Enum() *DeviceTypes {
	p := new(DeviceTypes)
	*p = x
	return p
}

func (x DeviceTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_plantStorage_proto_enumTypes[1].Descriptor()
}

func (DeviceTypes) Type() protoreflect.EnumType {
	return &file_plantStorage_proto_enumTypes[1]
}

func (x DeviceTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceTypes.Descriptor instead.
func (DeviceTypes) EnumDescriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{1}
}

type GetSensorOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSensorOverviewRequest) Reset() {
	*x = GetSensorOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorOverviewRequest) ProtoMessage() {}

func (x *GetSensorOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorOverviewRequest.ProtoReflect.Descriptor instead.
func (*GetSensorOverviewRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{0}
}

type GetSensorOverviewReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []*SensorMsg `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *GetSensorOverviewReply) Reset() {
	*x = GetSensorOverviewReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorOverviewReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorOverviewReply) ProtoMessage() {}

func (x *GetSensorOverviewReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorOverviewReply.ProtoReflect.Descriptor instead.
func (*GetSensorOverviewReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{1}
}

func (x *GetSensorOverviewReply) GetSensors() []*SensorMsg {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type GetSensorsForDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceMAC string `protobuf:"bytes,1,opt,name=deviceMAC,proto3" json:"deviceMAC,omitempty"`
}

func (x *GetSensorsForDeviceRequest) Reset() {
	*x = GetSensorsForDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorsForDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorsForDeviceRequest) ProtoMessage() {}

func (x *GetSensorsForDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorsForDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetSensorsForDeviceRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{2}
}

func (x *GetSensorsForDeviceRequest) GetDeviceMAC() string {
	if x != nil {
		return x.DeviceMAC
	}
	return ""
}

type GetSensorsForDeviceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []uint32 `protobuf:"varint,1,rep,packed,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *GetSensorsForDeviceReply) Reset() {
	*x = GetSensorsForDeviceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorsForDeviceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorsForDeviceReply) ProtoMessage() {}

func (x *GetSensorsForDeviceReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorsForDeviceReply.ProtoReflect.Descriptor instead.
func (*GetSensorsForDeviceReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{3}
}

func (x *GetSensorsForDeviceReply) GetSensors() []uint32 {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type SetActiveSensorsForDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceMAC string   `protobuf:"bytes,1,opt,name=deviceMAC,proto3" json:"deviceMAC,omitempty"`
	Activated []uint32 `protobuf:"varint,2,rep,packed,name=activated,proto3" json:"activated,omitempty"`
}

func (x *SetActiveSensorsForDeviceRequest) Reset() {
	*x = SetActiveSensorsForDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveSensorsForDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveSensorsForDeviceRequest) ProtoMessage() {}

func (x *SetActiveSensorsForDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveSensorsForDeviceRequest.ProtoReflect.Descriptor instead.
func (*SetActiveSensorsForDeviceRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{4}
}

func (x *SetActiveSensorsForDeviceRequest) GetDeviceMAC() string {
	if x != nil {
		return x.DeviceMAC
	}
	return ""
}

func (x *SetActiveSensorsForDeviceRequest) GetActivated() []uint32 {
	if x != nil {
		return x.Activated
	}
	return nil
}

type SetActiveSensorsForDeviceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetActiveSensorsForDeviceReply) Reset() {
	*x = SetActiveSensorsForDeviceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActiveSensorsForDeviceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActiveSensorsForDeviceReply) ProtoMessage() {}

func (x *SetActiveSensorsForDeviceReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActiveSensorsForDeviceReply.ProtoReflect.Descriptor instead.
func (*SetActiveSensorsForDeviceReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{5}
}

type SensorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceMAC      string `protobuf:"bytes,1,opt,name=deviceMAC,proto3" json:"deviceMAC,omitempty"`
	SensorId       int32  `protobuf:"varint,2,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	SensorSlot     int32  `protobuf:"varint,3,opt,name=sensorSlot,proto3" json:"sensorSlot,omitempty"`
	InUse          bool   `protobuf:"varint,4,opt,name=inUse,proto3" json:"inUse,omitempty"`
	ConnectedPlant int32  `protobuf:"varint,5,opt,name=connectedPlant,proto3" json:"connectedPlant,omitempty"`
}

func (x *SensorMsg) Reset() {
	*x = SensorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorMsg) ProtoMessage() {}

func (x *SensorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorMsg.ProtoReflect.Descriptor instead.
func (*SensorMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{6}
}

func (x *SensorMsg) GetDeviceMAC() string {
	if x != nil {
		return x.DeviceMAC
	}
	return ""
}

func (x *SensorMsg) GetSensorId() int32 {
	if x != nil {
		return x.SensorId
	}
	return 0
}

func (x *SensorMsg) GetSensorSlot() int32 {
	if x != nil {
		return x.SensorSlot
	}
	return 0
}

func (x *SensorMsg) GetInUse() bool {
	if x != nil {
		return x.InUse
	}
	return false
}

func (x *SensorMsg) GetConnectedPlant() int32 {
	if x != nil {
		return x.ConnectedPlant
	}
	return 0
}

type GetAllPlantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllPlantsRequest) Reset() {
	*x = GetAllPlantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllPlantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllPlantsRequest) ProtoMessage() {}

func (x *GetAllPlantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllPlantsRequest.ProtoReflect.Descriptor instead.
func (*GetAllPlantsRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{7}
}

type PlantThumbnailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*PlantThumbnailMsg `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *PlantThumbnailReply) Reset() {
	*x = PlantThumbnailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantThumbnailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantThumbnailReply) ProtoMessage() {}

func (x *PlantThumbnailReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantThumbnailReply.ProtoReflect.Descriptor instead.
func (*PlantThumbnailReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{8}
}

func (x *PlantThumbnailReply) GetImages() []*PlantThumbnailMsg {
	if x != nil {
		return x.Images
	}
	return nil
}

type PlantThumbnailMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId int32  `protobuf:"varint,1,opt,name=plantId,proto3" json:"plantId,omitempty"`
	Image   []byte `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *PlantThumbnailMsg) Reset() {
	*x = PlantThumbnailMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantThumbnailMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantThumbnailMsg) ProtoMessage() {}

func (x *PlantThumbnailMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantThumbnailMsg.ProtoReflect.Descriptor instead.
func (*PlantThumbnailMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{9}
}

func (x *PlantThumbnailMsg) GetPlantId() int32 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *PlantThumbnailMsg) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type PlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant int32 `protobuf:"varint,1,opt,name=plant,proto3" json:"plant,omitempty"`
}

func (x *PlantRequest) Reset() {
	*x = PlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantRequest) ProtoMessage() {}

func (x *PlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantRequest.ProtoReflect.Descriptor instead.
func (*PlantRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{10}
}

func (x *PlantRequest) GetPlant() int32 {
	if x != nil {
		return x.Plant
	}
	return 0
}

type DeletePlantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlantReply) Reset() {
	*x = DeletePlantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlantReply) ProtoMessage() {}

func (x *DeletePlantReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlantReply.ProtoReflect.Descriptor instead.
func (*DeletePlantReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{11}
}

type AllPlantsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*PlantOverviewMsg `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *AllPlantsReply) Reset() {
	*x = AllPlantsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPlantsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPlantsReply) ProtoMessage() {}

func (x *AllPlantsReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPlantsReply.ProtoReflect.Descriptor instead.
func (*AllPlantsReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{12}
}

func (x *AllPlantsReply) GetPlants() []*PlantOverviewMsg {
	if x != nil {
		return x.Plants
	}
	return nil
}

type AddPlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId  int32       `protobuf:"varint,1,opt,name=plantId,proto3" json:"plantId,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Info     string      `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
	SensorId int32       `protobuf:"varint,4,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	Images   []*ImageMsg `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *AddPlantRequest) Reset() {
	*x = AddPlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlantRequest) ProtoMessage() {}

func (x *AddPlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPlantRequest.ProtoReflect.Descriptor instead.
func (*AddPlantRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{13}
}

func (x *AddPlantRequest) GetPlantId() int32 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *AddPlantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPlantRequest) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *AddPlantRequest) GetSensorId() int32 {
	if x != nil {
		return x.SensorId
	}
	return 0
}

func (x *AddPlantRequest) GetImages() []*ImageMsg {
	if x != nil {
		return x.Images
	}
	return nil
}

type ImageMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId    int32  `protobuf:"varint,1,opt,name=imageId,proto3" json:"imageId,omitempty"`
	ImageBytes []byte `protobuf:"bytes,2,opt,name=imageBytes,proto3" json:"imageBytes,omitempty"`
}

func (x *ImageMsg) Reset() {
	*x = ImageMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMsg) ProtoMessage() {}

func (x *ImageMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMsg.ProtoReflect.Descriptor instead.
func (*ImageMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{14}
}

func (x *ImageMsg) GetImageId() int32 {
	if x != nil {
		return x.ImageId
	}
	return 0
}

func (x *ImageMsg) GetImageBytes() []byte {
	if x != nil {
		return x.ImageBytes
	}
	return nil
}

type PlantOverviewMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId   int32              `protobuf:"varint,1,opt,name=plantId,proto3" json:"plantId,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Info      string             `protobuf:"bytes,3,opt,name=Info,proto3" json:"Info,omitempty"`
	Gpio      *GpioIdentifierMsg `protobuf:"bytes,4,opt,name=gpio,proto3" json:"gpio,omitempty"`
	Thumbnail []byte             `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
}

func (x *PlantOverviewMsg) Reset() {
	*x = PlantOverviewMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantOverviewMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantOverviewMsg) ProtoMessage() {}

func (x *PlantOverviewMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantOverviewMsg.ProtoReflect.Descriptor instead.
func (*PlantOverviewMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{15}
}

func (x *PlantOverviewMsg) GetPlantId() int32 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *PlantOverviewMsg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlantOverviewMsg) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *PlantOverviewMsg) GetGpio() *GpioIdentifierMsg {
	if x != nil {
		return x.Gpio
	}
	return nil
}

func (x *PlantOverviewMsg) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

type GetAdditionalDataPlantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlantId int32 `protobuf:"varint,1,opt,name=plantId,proto3" json:"plantId,omitempty"`
}

func (x *GetAdditionalDataPlantRequest) Reset() {
	*x = GetAdditionalDataPlantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdditionalDataPlantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdditionalDataPlantRequest) ProtoMessage() {}

func (x *GetAdditionalDataPlantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdditionalDataPlantRequest.ProtoReflect.Descriptor instead.
func (*GetAdditionalDataPlantRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{16}
}

func (x *GetAdditionalDataPlantRequest) GetPlantId() int32 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

type HumidityMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Humidity  int32                  `protobuf:"varint,1,opt,name=humidity,proto3" json:"humidity,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *HumidityMsg) Reset() {
	*x = HumidityMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumidityMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumidityMsg) ProtoMessage() {}

func (x *HumidityMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumidityMsg.ProtoReflect.Descriptor instead.
func (*HumidityMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{17}
}

func (x *HumidityMsg) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *HumidityMsg) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GpioIdentifierMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorId                  int32  `protobuf:"varint,1,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	DeviceSerialInterfaceName string `protobuf:"bytes,2,opt,name=deviceSerialInterfaceName,proto3" json:"deviceSerialInterfaceName,omitempty"`
	GpioName                  string `protobuf:"bytes,3,opt,name=gpioName,proto3" json:"gpioName,omitempty"`
}

func (x *GpioIdentifierMsg) Reset() {
	*x = GpioIdentifierMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpioIdentifierMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpioIdentifierMsg) ProtoMessage() {}

func (x *GpioIdentifierMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpioIdentifierMsg.ProtoReflect.Descriptor instead.
func (*GpioIdentifierMsg) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{18}
}

func (x *GpioIdentifierMsg) GetSensorId() int32 {
	if x != nil {
		return x.SensorId
	}
	return 0
}

func (x *GpioIdentifierMsg) GetDeviceSerialInterfaceName() string {
	if x != nil {
		return x.DeviceSerialInterfaceName
	}
	return ""
}

func (x *GpioIdentifierMsg) GetGpioName() string {
	if x != nil {
		return x.GpioName
	}
	return ""
}

type GetAdditionalDataPlantReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant    int32              `protobuf:"varint,1,opt,name=plant,proto3" json:"plant,omitempty"`
	Gpio     *GpioIdentifierMsg `protobuf:"bytes,2,opt,name=gpio,proto3" json:"gpio,omitempty"`
	Humidity []*HumidityMsg     `protobuf:"bytes,4,rep,name=humidity,proto3" json:"humidity,omitempty"`
	Images   []*ImageMsg        `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *GetAdditionalDataPlantReply) Reset() {
	*x = GetAdditionalDataPlantReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdditionalDataPlantReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdditionalDataPlantReply) ProtoMessage() {}

func (x *GetAdditionalDataPlantReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdditionalDataPlantReply.ProtoReflect.Descriptor instead.
func (*GetAdditionalDataPlantReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{19}
}

func (x *GetAdditionalDataPlantReply) GetPlant() int32 {
	if x != nil {
		return x.Plant
	}
	return 0
}

func (x *GetAdditionalDataPlantReply) GetGpio() *GpioIdentifierMsg {
	if x != nil {
		return x.Gpio
	}
	return nil
}

func (x *GetAdditionalDataPlantReply) GetHumidity() []*HumidityMsg {
	if x != nil {
		return x.Humidity
	}
	return nil
}

func (x *GetAdditionalDataPlantReply) GetImages() []*ImageMsg {
	if x != nil {
		return x.Images
	}
	return nil
}

type GetDataForSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SensorId int32  `protobuf:"varint,1,opt,name=sensorId,proto3" json:"sensorId,omitempty"`
	Limit    *int64 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *GetDataForSensorRequest) Reset() {
	*x = GetDataForSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataForSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataForSensorRequest) ProtoMessage() {}

func (x *GetDataForSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataForSensorRequest.ProtoReflect.Descriptor instead.
func (*GetDataForSensorRequest) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{20}
}

func (x *GetDataForSensorRequest) GetSensorId() int32 {
	if x != nil {
		return x.SensorId
	}
	return 0
}

func (x *GetDataForSensorRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetDataForSensorReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HumidityMsg `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDataForSensorReply) Reset() {
	*x = GetDataForSensorReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plantStorage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataForSensorReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataForSensorReply) ProtoMessage() {}

func (x *GetDataForSensorReply) ProtoReflect() protoreflect.Message {
	mi := &file_plantStorage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataForSensorReply.ProtoReflect.Descriptor instead.
func (*GetDataForSensorReply) Descriptor() ([]byte, []int) {
	return file_plantStorage_proto_rawDescGZIP(), []int{21}
}

func (x *GetDataForSensorReply) GetData() []*HumidityMsg {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_plantStorage_proto protoreflect.FileDescriptor

var file_plantStorage_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41,
	0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x41, 0x43, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa3, 0x01, 0x0a, 0x09, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x41, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x6c, 0x6f, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x08,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x67, 0x70, 0x69,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x67, 0x70, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x22, 0x39, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0b, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x47,
	0x70, 0x69, 0x6f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70,
	0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x70,
	0x69, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x67, 0x70, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x67, 0x70, 0x69, 0x6f, 0x12,
	0x33, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x48,
	0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x5a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x44,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x2a, 0x4e, 0x0a, 0x08, 0x47, 0x70, 0x69, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x50, 0x49,
	0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x49, 0x53, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x50, 0x49, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x44, 0x55, 0x49, 0x4e, 0x4f, 0x5f, 0x4e, 0x41, 0x4e, 0x4f,
	0x10, 0x02, 0x32, 0xac, 0x07, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09,
	0x12, 0x07, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12,
	0x06, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x4e, 0x65,
	0x77, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x4d, 0x73,
	0x67, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x1a, 0x0a, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x2f, 0x6e, 0x65, 0x77, 0x12, 0x5c, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x1a, 0x0d, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x71, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x12, 0x0d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x90,
	0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x5a, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x31, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x6f, 0x62, 0x69, 0x61, 0x73, 0x6a, 0x75, 0x6e, 0x67, 0x6d, 0x61, 0x6e, 0x6e, 0x2f, 0x48,
	0x69, 0x6d, 0x62, 0x65, 0x65, 0x72, 0x67, 0x61, 0x72, 0x74, 0x65, 0x6e, 0x5f, 0x52, 0x50, 0x69,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plantStorage_proto_rawDescOnce sync.Once
	file_plantStorage_proto_rawDescData = file_plantStorage_proto_rawDesc
)

func file_plantStorage_proto_rawDescGZIP() []byte {
	file_plantStorage_proto_rawDescOnce.Do(func() {
		file_plantStorage_proto_rawDescData = protoimpl.X.CompressGZIP(file_plantStorage_proto_rawDescData)
	})
	return file_plantStorage_proto_rawDescData
}

var file_plantStorage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_plantStorage_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_plantStorage_proto_goTypes = []interface{}{
	(GpioUser)(0),                            // 0: smart_home.GpioUser
	(DeviceTypes)(0),                         // 1: smart_home.DeviceTypes
	(*GetSensorOverviewRequest)(nil),         // 2: smart_home.GetSensorOverviewRequest
	(*GetSensorOverviewReply)(nil),           // 3: smart_home.GetSensorOverviewReply
	(*GetSensorsForDeviceRequest)(nil),       // 4: smart_home.GetSensorsForDeviceRequest
	(*GetSensorsForDeviceReply)(nil),         // 5: smart_home.GetSensorsForDeviceReply
	(*SetActiveSensorsForDeviceRequest)(nil), // 6: smart_home.SetActiveSensorsForDeviceRequest
	(*SetActiveSensorsForDeviceReply)(nil),   // 7: smart_home.SetActiveSensorsForDeviceReply
	(*SensorMsg)(nil),                        // 8: smart_home.SensorMsg
	(*GetAllPlantsRequest)(nil),              // 9: smart_home.GetAllPlantsRequest
	(*PlantThumbnailReply)(nil),              // 10: smart_home.PlantThumbnailReply
	(*PlantThumbnailMsg)(nil),                // 11: smart_home.PlantThumbnailMsg
	(*PlantRequest)(nil),                     // 12: smart_home.PlantRequest
	(*DeletePlantReply)(nil),                 // 13: smart_home.DeletePlantReply
	(*AllPlantsReply)(nil),                   // 14: smart_home.AllPlantsReply
	(*AddPlantRequest)(nil),                  // 15: smart_home.AddPlantRequest
	(*ImageMsg)(nil),                         // 16: smart_home.ImageMsg
	(*PlantOverviewMsg)(nil),                 // 17: smart_home.PlantOverviewMsg
	(*GetAdditionalDataPlantRequest)(nil),    // 18: smart_home.GetAdditionalDataPlantRequest
	(*HumidityMsg)(nil),                      // 19: smart_home.HumidityMsg
	(*GpioIdentifierMsg)(nil),                // 20: smart_home.GpioIdentifierMsg
	(*GetAdditionalDataPlantReply)(nil),      // 21: smart_home.GetAdditionalDataPlantReply
	(*GetDataForSensorRequest)(nil),          // 22: smart_home.GetDataForSensorRequest
	(*GetDataForSensorReply)(nil),            // 23: smart_home.GetDataForSensorReply
	(*timestamppb.Timestamp)(nil),            // 24: google.protobuf.Timestamp
}
var file_plantStorage_proto_depIdxs = []int32{
	8,  // 0: smart_home.GetSensorOverviewReply.sensors:type_name -> smart_home.SensorMsg
	11, // 1: smart_home.PlantThumbnailReply.images:type_name -> smart_home.PlantThumbnailMsg
	17, // 2: smart_home.AllPlantsReply.plants:type_name -> smart_home.PlantOverviewMsg
	16, // 3: smart_home.AddPlantRequest.images:type_name -> smart_home.ImageMsg
	20, // 4: smart_home.PlantOverviewMsg.gpio:type_name -> smart_home.GpioIdentifierMsg
	24, // 5: smart_home.HumidityMsg.timestamp:type_name -> google.protobuf.Timestamp
	20, // 6: smart_home.GetAdditionalDataPlantReply.gpio:type_name -> smart_home.GpioIdentifierMsg
	19, // 7: smart_home.GetAdditionalDataPlantReply.humidity:type_name -> smart_home.HumidityMsg
	16, // 8: smart_home.GetAdditionalDataPlantReply.images:type_name -> smart_home.ImageMsg
	19, // 9: smart_home.GetDataForSensorReply.data:type_name -> smart_home.HumidityMsg
	9,  // 10: smart_home.PlantStorage.getOverviewAllPlants:input_type -> smart_home.GetAllPlantsRequest
	18, // 11: smart_home.PlantStorage.getAdditionalDataPlant:input_type -> smart_home.GetAdditionalDataPlantRequest
	15, // 12: smart_home.PlantStorage.addNewPlant:input_type -> smart_home.AddPlantRequest
	12, // 13: smart_home.PlantStorage.deletePlant:input_type -> smart_home.PlantRequest
	2,  // 14: smart_home.PlantStorage.getConnectedSensorOverview:input_type -> smart_home.GetSensorOverviewRequest
	22, // 15: smart_home.PlantStorage.GetDataForSensor:input_type -> smart_home.GetDataForSensorRequest
	4,  // 16: smart_home.PlantStorage.GetSensorsForDevice:input_type -> smart_home.GetSensorsForDeviceRequest
	6,  // 17: smart_home.PlantStorage.SetActiveSensorsForDevice:input_type -> smart_home.SetActiveSensorsForDeviceRequest
	14, // 18: smart_home.PlantStorage.getOverviewAllPlants:output_type -> smart_home.AllPlantsReply
	21, // 19: smart_home.PlantStorage.getAdditionalDataPlant:output_type -> smart_home.GetAdditionalDataPlantReply
	17, // 20: smart_home.PlantStorage.addNewPlant:output_type -> smart_home.PlantOverviewMsg
	13, // 21: smart_home.PlantStorage.deletePlant:output_type -> smart_home.DeletePlantReply
	3,  // 22: smart_home.PlantStorage.getConnectedSensorOverview:output_type -> smart_home.GetSensorOverviewReply
	23, // 23: smart_home.PlantStorage.GetDataForSensor:output_type -> smart_home.GetDataForSensorReply
	5,  // 24: smart_home.PlantStorage.GetSensorsForDevice:output_type -> smart_home.GetSensorsForDeviceReply
	7,  // 25: smart_home.PlantStorage.SetActiveSensorsForDevice:output_type -> smart_home.SetActiveSensorsForDeviceReply
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_plantStorage_proto_init() }
func file_plantStorage_proto_init() {
	if File_plantStorage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plantStorage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorOverviewReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorsForDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorsForDeviceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveSensorsForDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetActiveSensorsForDeviceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllPlantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantThumbnailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantThumbnailMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPlantsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantOverviewMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdditionalDataPlantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumidityMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpioIdentifierMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdditionalDataPlantReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataForSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plantStorage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataForSensorReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plantStorage_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plantStorage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plantStorage_proto_goTypes,
		DependencyIndexes: file_plantStorage_proto_depIdxs,
		EnumInfos:         file_plantStorage_proto_enumTypes,
		MessageInfos:      file_plantStorage_proto_msgTypes,
	}.Build()
	File_plantStorage_proto = out.File
	file_plantStorage_proto_rawDesc = nil
	file_plantStorage_proto_goTypes = nil
	file_plantStorage_proto_depIdxs = nil
}
